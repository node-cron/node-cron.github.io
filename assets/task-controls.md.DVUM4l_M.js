import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"Task Controls","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"task-controls.md","filePath":"task-controls.md"}'),n={name:"task-controls.md"};function h(l,s,k,p,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="task-controls" tabindex="-1">Task Controls <a class="header-anchor" href="#task-controls" aria-label="Permalink to &quot;Task Controls&quot;">​</a></h1><p>When scheduling a task with <code>cron.schedule</code> function it accepts a cron expression, a task (either as a function or a path to a task file), and optional configuration.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;* * * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, { scheduled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stopped</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// starts the scheduler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// idle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when task is running</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// running</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stops the scheduler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// manually performs the task</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stops the scheduler and releases the resources</span></span></code></pre></div><p>This function returns an object that implements the ScheduledTask interface. Whether you&#39;re using a simple in-process task or a background task that runs in a separate process, the returned object provides the same set of utility methods for managing the task&#39;s lifecycle and triggering it manually.</p><h2 id="scheduledtask-interface" tabindex="-1">ScheduledTask Interface <a class="header-anchor" href="#scheduledtask-interface" aria-label="Permalink to &quot;ScheduledTask Interface&quot;">​</a></h2><p>The ScheduledTask interface defines a standard contract for scheduled task behavior. This allows your code to interact with any scheduled task in a consistent way — starting, stopping, executing, or destroying it, regardless of the underlying implementation.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScheduledTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CronEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="method-descriptions" tabindex="-1">Method Descriptions <a class="header-anchor" href="#method-descriptions" aria-label="Permalink to &quot;Method Descriptions&quot;">​</a></h2><h3 id="start-void" tabindex="-1"><code>start(): void</code> <a class="header-anchor" href="#start-void" aria-label="Permalink to &quot;\`start(): void\`&quot;">​</a></h3><p>Begins the task scheduler.<br> For background tasks, this also forks a new process and starts a daemon responsible for managing the schedule and execution.</p><h3 id="stop-void" tabindex="-1"><code>stop(): void</code> <a class="header-anchor" href="#stop-void" aria-label="Permalink to &quot;\`stop(): void\`&quot;">​</a></h3><p>Stops the task from running in the future:</p><ul><li>For <strong>basic (in-process)</strong> tasks, it halts the scheduler but allows any currently running job to finish.</li><li>For <strong>background tasks</strong>, it terminates the child process immediately — stopping the scheduler <strong>and</strong> any running job.</li></ul><h3 id="getstatus-string" tabindex="-1"><code>getStatus(): string</code> <a class="header-anchor" href="#getstatus-string" aria-label="Permalink to &quot;\`getStatus(): string\`&quot;">​</a></h3><p>Returns the current lifecycle status of the task. Typical values include:</p><ul><li><code>&#39;running&#39;</code> – task is actively executing.</li><li><code>&#39;idle&#39;</code> – task is scheduled but not currently running.</li><li><code>&#39;stopped&#39;</code> – scheduler is inactive.</li><li><code>&#39;destroyed&#39;</code> – task has been permanently removed.</li></ul><h3 id="destroy-void" tabindex="-1"><code>destroy(): void</code> <a class="header-anchor" href="#destroy-void" aria-label="Permalink to &quot;\`destroy(): void\`&quot;">​</a></h3><p>Fully removes the task and cleans up its resources.<br> For background tasks, this also kills the process, detaches listeners, and deletes any persistent metadata.</p><h3 id="execute-event-any-promise-any" tabindex="-1"><code>execute(event?: any): Promise&lt;any&gt;</code> <a class="header-anchor" href="#execute-event-any-promise-any" aria-label="Permalink to &quot;\`execute(event?: any): Promise&lt;any&gt;\`&quot;">​</a></h3><p>Manually executes the task immediately, regardless of its schedule.<br> Returns a <code>Promise</code> with the result of the execution or rejects if the task is not active or running (e.g., in a background task with no active process).</p>`,20)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
