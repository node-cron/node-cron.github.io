import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"Background Tasks","description":"","frontmatter":{},"headers":[],"relativePath":"background-tasks.md","filePath":"background-tasks.md"}'),n={name:"background-tasks.md"};function h(l,s,k,o,p,r){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="background-tasks" tabindex="-1">Background Tasks <a class="header-anchor" href="#background-tasks" aria-label="Permalink to &quot;Background Tasks&quot;">​</a></h1><p>Background Tasks allows you to schedule recurring jobs that run in separate forked processes using Node’s <code>child_process</code>. This ensures that background tasks are isolated from the main application, improving reliability and performance. Each task is defined in its own file and triggered via a cron expression, offering a clean, modular approach to background automation.</p><h2 id="how-to-use" tabindex="-1">How to Use <a class="header-anchor" href="#how-to-use" aria-label="Permalink to &quot;How to Use&quot;">​</a></h2><p><strong>1. Create a Task File</strong></p><p>Write a file that exports a task function. This function will contain the logic you want to run on a schedule.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./tasks/my-task.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello from background task!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>Or using ESM</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ./tasks/my-task.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello from background task!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>2. Schedule the Task</strong></p><p>Use the task file path to register and start the task.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cron </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node-cron&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*/5 * * * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./tasks/my-task.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="how-it-works-internally" tabindex="-1">How It Works Internally <a class="header-anchor" href="#how-it-works-internally" aria-label="Permalink to &quot;How It Works Internally&quot;">​</a></h2><p>When a Background Task is created, it forks a new process and starts a <code>daemon</code> that handles task scheduling by loading the task and scheduling it like the regular cron scheduler. This ensures the cron job runs in isolation.</p><p>The parent and child processes communicate through events, such as <code>task-started</code>, <code>task-done</code>, and others, to keep track of the task’s status and execution.</p><p>The system implements the same interface as a basic scheduled task, providing utility functions like <code>start()</code>, <code>stop()</code>, and <code>destroy()</code>, allowing for easy lifecycle management of the task.</p>`,15)]))}const g=a(n,[["render",h]]);export{c as __pageData,g as default};
