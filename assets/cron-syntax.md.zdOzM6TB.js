import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.Dh1jimFm.js";const E=JSON.parse('{"title":"Cron Syntax","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"cron-syntax.md","filePath":"cron-syntax.md"}'),t={name:"cron-syntax.md"};function l(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="cron-syntax" tabindex="-1">Cron Syntax <a class="header-anchor" href="#cron-syntax" aria-label="Permalink to &quot;Cron Syntax&quot;">​</a></h1><p>The <code>node-cron</code> package uses a standard cron expression format to define when tasks should run. It supports <strong>five or six fields</strong>, though the <strong>first (seconds)</strong> is optional.</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ┌────────────── second (optional)</span></span>
<span class="line"><span># │ ┌──────────── minute</span></span>
<span class="line"><span># │ │ ┌────────── hour</span></span>
<span class="line"><span># │ │ │ ┌──────── day of month</span></span>
<span class="line"><span># │ │ │ │ ┌────── month</span></span>
<span class="line"><span># │ │ │ │ │ ┌──── day of week</span></span>
<span class="line"><span># │ │ │ │ │ │</span></span>
<span class="line"><span># * * * * * *</span></span></code></pre></div><h3 id="allowed-values-per-field" tabindex="-1">Allowed Values Per Field <a class="header-anchor" href="#allowed-values-per-field" aria-label="Permalink to &quot;Allowed Values Per Field&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td>second</td><td>0-59 (optional)</td></tr><tr><td>minute</td><td>0-59</td></tr><tr><td>hour</td><td>0-23</td></tr><tr><td>day of month</td><td>1-31</td></tr><tr><td>month</td><td>1-12 (or names, e.g., Jan, Sep)</td></tr><tr><td>day of week</td><td>0-7 (or names, 0 or 7 are Sunday)</td></tr></tbody></table><h3 id="usage-examples" tabindex="-1">Usage Examples <a class="header-anchor" href="#usage-examples" aria-label="Permalink to &quot;Usage Examples&quot;">​</a></h3><h3 id="_1-using-multiple-values" tabindex="-1">1. Using Multiple Values <a class="header-anchor" href="#_1-using-multiple-values" aria-label="Permalink to &quot;1. Using Multiple Values&quot;">​</a></h3><p>You can define multiple specific values using commas. This allows you to run a task at more than one time in a field.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cron </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node-cron&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Runs at minutes 1, 2, 4, and 5 of every hour</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1,2,4,5 * * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running at minutes 1, 2, 4, and 5 of each hour&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><blockquote><p><strong>Explanation</strong>: The first field (<code>minute</code>) is set to <code>1,2,4,5</code>, which means the task runs at those specific minutes past every hour.<br><strong>Important</strong>: This expression has only 5 fields, so the <strong><code>second</code></strong> field is omitted. In <code>node-cron</code>, when the seconds field is not provided, it defaults to <code>0</code>.</p></blockquote><h3 id="_2-using-ranges" tabindex="-1">2. Using Ranges <a class="header-anchor" href="#_2-using-ranges" aria-label="Permalink to &quot;2. Using Ranges&quot;">​</a></h3><p>You can define a range using a dash (<code>-</code>) to specify a continuous interval.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cron </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node-cron&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Runs every minute from minute 1 to minute 5 (inclusive) of every hour</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1-5 * * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running every minute from 1 to 5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;running every minute to 1 from 5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p><strong>Explanation</strong>: This is equivalent to writing <code>1,2,3,4,5</code>. It&#39;s a cleaner way to express consecutive values.</p></blockquote><h3 id="_3-using-step-values" tabindex="-1">3. Using Step Values <a class="header-anchor" href="#_3-using-step-values" aria-label="Permalink to &quot;3. Using Step Values&quot;">​</a></h3><p>Steps are defined using a slash (<code>/</code>) after a range or a wildcard. This allows you to define periodic intervals.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Runs every 2 minutes (even minutes: 0, 2, 4, ...)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*/2 * * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running every 2 minutes (even minutes)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Runs every odd minute (1, 3, 5, ..., 59)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1-59/2 * * * *&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running every 2 minutes starting from 1 (odd minutes)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><blockquote><p><strong>Explanation</strong>:</p><ul><li><p><code>*/2</code> means “every 2 units”, respecting the available values, e.g: minutes <code>0-59</code>. In this case, it means &quot;every 2 minutes from 0 to 59, covering all even minutes.</p></li><li><p><code>1-59/2</code> means “every 2 units starting from 1”, covering all odd minutes.</p></li></ul></blockquote><h3 id="_4-using-month-and-weekday-names" tabindex="-1">4. Using Month and Weekday Names <a class="header-anchor" href="#_4-using-month-and-weekday-names" aria-label="Permalink to &quot;4. Using Month and Weekday Names&quot;">​</a></h3><p>For better readability, <code>node-cron</code> lets you use names (full or abbreviated) instead of numbers for months and days of the week.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Runs every minute on Sundays in January and September</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;* * * January,September Sunday&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running on Sundays in January and September&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Same schedule using short names</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cron.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;* * * Jan,Sep Sun&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running on Sundays in Jan and Sep&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><blockquote><p><strong>Explanation</strong>: Names can improve readability, especially when dealing with specific months or days.</p></blockquote>`,22)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
